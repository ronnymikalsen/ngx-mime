import * as d3 from 'd3';
import * as OpenSeadragon from 'openseadragon';
import { ViewerOptions } from '../models/viewer-options';
import { Rect } from '../models/rect';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var CanvasGroupMask = /** @class */ (function () {
    function CanvasGroupMask(viewer, styleService) {
        var _this = this;
        this.styleService = styleService;
        this.disableResize = false;
        this.destroyed = new Subject();
        this.animationHandler = function () {
            _this.resize();
        };
        this.resizeHandler = function () {
            _this.setCenter();
            _this.resize();
        };
        this.canvasGroupPinchHandler = function () {
            _this.disableResize = false;
        };
        this.canvasGroupDragHandler = function (e) {
            if ((e.delta.x || e.delta.y) && e.speed > 0 && e.direction !== 0) {
                _this.disableResize = true;
            }
        };
        this.canvasGroupDragEndHandler = function () {
            _this.disableResize = false;
            _this.resize();
        };
        this.viewer = viewer;
        styleService.onChange.pipe(takeUntil(this.destroyed)).subscribe(function (c) {
            _this.backgroundColor = c;
            if (_this.leftMask) {
                _this.leftMask.style('fill', _this.backgroundColor);
            }
            if (_this.rightMask) {
                _this.rightMask.style('fill', _this.backgroundColor);
            }
        });
    }
    CanvasGroupMask.prototype.initialise = function (pageBounds, visible) {
        this.canvasGroupRect = pageBounds;
        this.addCanvasGroupMask();
        this.setCenter();
        this.resize();
        if (visible) {
            this.show();
        }
        else {
            this.hide();
        }
    };
    CanvasGroupMask.prototype.destroy = function () {
        this.destroyed.next();
        this.destroyed.complete();
    };
    CanvasGroupMask.prototype.changeCanvasGroup = function (pageBounds) {
        this.canvasGroupRect = pageBounds;
        this.resize();
    };
    CanvasGroupMask.prototype.show = function () {
        this.addHandlers();
        if (!this.leftMask || !this.rightMask) {
            return;
        }
        this.setCenter();
        this.resize();
        this.leftMask.attr('height', '100%');
        this.rightMask.attr('height', '100%');
    };
    CanvasGroupMask.prototype.hide = function () {
        this.removeHandlers();
        if (!this.leftMask || !this.rightMask) {
            return;
        }
        this.leftMask.attr('height', '0');
        this.rightMask.attr('height', '0');
    };
    CanvasGroupMask.prototype.addHandlers = function () {
        this.viewer.addHandler('animation', this.animationHandler);
        this.viewer.addHandler('resize', this.resizeHandler);
        this.viewer.addHandler('canvas-pinch', this.canvasGroupPinchHandler);
        this.viewer.addHandler('canvas-drag', this.canvasGroupDragHandler);
        this.viewer.addHandler('canvas-drag-end', this.canvasGroupDragEndHandler);
    };
    CanvasGroupMask.prototype.removeHandlers = function () {
        this.viewer.removeHandler('animation', this.animationHandler);
        this.viewer.removeHandler('resize', this.resizeHandler);
        this.viewer.removeHandler('canvas-pinch', this.canvasGroupPinchHandler);
        this.viewer.removeHandler('canvas-drag', this.canvasGroupDragHandler);
        this.viewer.removeHandler('canvas-drag-end', this.canvasGroupDragEndHandler);
    };
    CanvasGroupMask.prototype.addCanvasGroupMask = function () {
        var overlays = d3.select(this.viewer.svgOverlay().node().parentNode);
        var mask = overlays.append('g').attr('id', 'page-mask');
        this.leftMask = mask
            .append('rect')
            .attr('id', 'mime-left-page-mask')
            .attr('height', '100%')
            .attr('y', 0)
            .style('fill', this.backgroundColor);
        this.rightMask = mask
            .append('rect')
            .attr('id', 'mime-right-page-mask')
            .attr('height', '100%')
            .attr('y', 0)
            .style('fill', this.backgroundColor);
    };
    CanvasGroupMask.prototype.setCenter = function () {
        this.center = new OpenSeadragon.Point(this.viewer.viewport._containerInnerSize.x / 2, this.viewer.viewport._containerInnerSize.y / 2);
    };
    CanvasGroupMask.prototype.resize = function () {
        if (this.disableResize || !this.leftMask || !this.rightMask) {
            return;
        }
        var leftMaskRect = this.getLeftMaskRect();
        var rightMaskRect = this.getRightMaskRect();
        this.leftMask.attr('width', leftMaskRect.width).attr('x', leftMaskRect.x);
        this.rightMask
            .attr('width', rightMaskRect.width)
            .attr('x', Math.round(rightMaskRect.x));
    };
    CanvasGroupMask.prototype.getLeftMaskRect = function () {
        var imgBounds = new OpenSeadragon.Rect(this.canvasGroupRect.x, this.canvasGroupRect.y, this.canvasGroupRect.width, this.canvasGroupRect.height);
        var topLeft = this.viewer.viewport.viewportToViewerElementCoordinates(imgBounds.getTopLeft());
        var width = topLeft.x - ViewerOptions.overlays.canvasGroupMarginInPageView;
        if (width < 0) {
            width = 0;
        }
        return new Rect({
            x: 0,
            width: width
        });
    };
    CanvasGroupMask.prototype.getRightMaskRect = function () {
        var imgBounds = new OpenSeadragon.Rect(this.canvasGroupRect.x, this.canvasGroupRect.y, this.canvasGroupRect.width, this.canvasGroupRect.height);
        var topRight = this.viewer.viewport.viewportToViewerElementCoordinates(imgBounds.getTopRight());
        var width = this.viewer.viewport._containerInnerSize.x - topRight.x;
        var x = this.viewer.viewport._containerInnerSize.x -
            width +
            ViewerOptions.overlays.canvasGroupMarginInPageView;
        if (width < 0) {
            width = 0;
        }
        return new Rect({
            x: x,
            width: width
        });
    };
    return CanvasGroupMask;
}());
export { CanvasGroupMask };
//# sourceMappingURL=data:application/json;base64,