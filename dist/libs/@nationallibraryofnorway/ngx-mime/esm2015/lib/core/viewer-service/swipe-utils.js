import { Side } from '../models/side';
import { Direction } from '../models/direction';
import { ViewerOptions } from '../models/viewer-options';
export class SwipeUtils {
    // Added threshold to prevent sensitive direction-calculation when zoomed in
    static getSwipeDirection(start, end, useThreshold) {
        let deltaX = Math.abs(start.x - end.x);
        const deltaY = Math.abs(start.y - end.y);
        deltaX = useThreshold
            ? deltaX - ViewerOptions.pan.swipeDirectionThreshold
            : deltaX;
        if (start.x > end.x && deltaX >= deltaY) {
            return Direction.LEFT;
        }
        else if (start.x < end.x && deltaX >= deltaY) {
            return Direction.RIGHT;
        }
    }
    static getSideIfPanningPastEndOfCanvasGroup(canvasGroupRect, vpBounds) {
        if (this.isPanningOutsideLeft(canvasGroupRect, vpBounds)) {
            return Side.LEFT;
        }
        else if (this.isPanningOutsideRight(canvasGroupRect, vpBounds)) {
            return Side.RIGHT;
        }
    }
    static isPanningOutsideCanvasGroup(canvasGroupRect, vpBounds) {
        return (this.isPanningOutsideLeft(canvasGroupRect, vpBounds) ||
            this.isPanningOutsideRight(canvasGroupRect, vpBounds));
    }
    static isPanningOutsideLeft(canvasGroupRect, vpBounds) {
        return vpBounds.x < canvasGroupRect.x;
    }
    static isPanningOutsideRight(canvasGroupRect, vpBounds) {
        return (vpBounds.x + vpBounds.width > canvasGroupRect.x + canvasGroupRect.width);
    }
    /**
     *
     * @param direction Current computed direction, expressed as an
     * angle counterclockwise relative to the positive X axis (-pi to pi, in radians).
     * Only valid if speed > 0.
     */
    static isDirectionInRightSemicircle(direction) {
        return direction > -Math.PI / 2 && direction < Math.PI / 2;
    }
    /**
     * @param direction @see isDirectionInRightSemicircle
     */
    static isDirectionInLeftSemicircle(direction) {
        return !this.isDirectionInRightSemicircle(direction) || direction === 0; // fix for speed = 0
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGUtdXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmF0aW9uYWxsaWJyYXJ5b2Zub3J3YXkvbmd4LW1pbWUvIiwic291cmNlcyI6WyJsaWIvY29yZS92aWV3ZXItc2VydmljZS9zd2lwZS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RCxNQUFNLE9BQU8sVUFBVTtJQUNyQiw0RUFBNEU7SUFDNUUsTUFBTSxDQUFDLGlCQUFpQixDQUN0QixLQUFZLEVBQ1osR0FBVSxFQUNWLFlBQXNCO1FBRXRCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxNQUFNLEdBQUcsWUFBWTtZQUNuQixDQUFDLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsdUJBQXVCO1lBQ3BELENBQUMsQ0FBQyxNQUFNLENBQUM7UUFFWCxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksTUFBTSxFQUFFO1lBQ3ZDLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQztTQUN2QjthQUFNLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLE1BQU0sSUFBSSxNQUFNLEVBQUU7WUFDOUMsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxvQ0FBb0MsQ0FDekMsZUFBcUIsRUFDckIsUUFBYztRQUVkLElBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsRUFBRTtZQUN4RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDbEI7YUFBTSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDLEVBQUU7WUFDaEUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQywyQkFBMkIsQ0FDaEMsZUFBcUIsRUFDckIsUUFBYztRQUVkLE9BQU8sQ0FDTCxJQUFJLENBQUMsb0JBQW9CLENBQUMsZUFBZSxFQUFFLFFBQVEsQ0FBQztZQUNwRCxJQUFJLENBQUMscUJBQXFCLENBQUMsZUFBZSxFQUFFLFFBQVEsQ0FBQyxDQUN0RCxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxlQUFxQixFQUFFLFFBQWM7UUFDL0QsT0FBTyxRQUFRLENBQUMsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxlQUFxQixFQUFFLFFBQWM7UUFDaEUsT0FBTyxDQUNMLFFBQVEsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUMsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQ3hFLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsNEJBQTRCLENBQUMsU0FBaUI7UUFDbkQsT0FBTyxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLDJCQUEyQixDQUFDLFNBQWlCO1FBQ2xELE9BQU8sQ0FBQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFDLG9CQUFvQjtJQUMvRixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlY3QnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLi9tb2RlbHMvcG9pbnQnO1xuaW1wb3J0IHsgU2lkZSB9IGZyb20gJy4uL21vZGVscy9zaWRlJztcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gJy4uL21vZGVscy9kaXJlY3Rpb24nO1xuaW1wb3J0IHsgVmlld2VyT3B0aW9ucyB9IGZyb20gJy4uL21vZGVscy92aWV3ZXItb3B0aW9ucyc7XG5leHBvcnQgY2xhc3MgU3dpcGVVdGlscyB7XG4gIC8vIEFkZGVkIHRocmVzaG9sZCB0byBwcmV2ZW50IHNlbnNpdGl2ZSBkaXJlY3Rpb24tY2FsY3VsYXRpb24gd2hlbiB6b29tZWQgaW5cbiAgc3RhdGljIGdldFN3aXBlRGlyZWN0aW9uKFxuICAgIHN0YXJ0OiBQb2ludCxcbiAgICBlbmQ6IFBvaW50LFxuICAgIHVzZVRocmVzaG9sZD86IGJvb2xlYW5cbiAgKTogRGlyZWN0aW9uIHtcbiAgICBsZXQgZGVsdGFYID0gTWF0aC5hYnMoc3RhcnQueCAtIGVuZC54KTtcbiAgICBjb25zdCBkZWx0YVkgPSBNYXRoLmFicyhzdGFydC55IC0gZW5kLnkpO1xuICAgIGRlbHRhWCA9IHVzZVRocmVzaG9sZFxuICAgICAgPyBkZWx0YVggLSBWaWV3ZXJPcHRpb25zLnBhbi5zd2lwZURpcmVjdGlvblRocmVzaG9sZFxuICAgICAgOiBkZWx0YVg7XG5cbiAgICBpZiAoc3RhcnQueCA+IGVuZC54ICYmIGRlbHRhWCA+PSBkZWx0YVkpIHtcbiAgICAgIHJldHVybiBEaXJlY3Rpb24uTEVGVDtcbiAgICB9IGVsc2UgaWYgKHN0YXJ0LnggPCBlbmQueCAmJiBkZWx0YVggPj0gZGVsdGFZKSB7XG4gICAgICByZXR1cm4gRGlyZWN0aW9uLlJJR0hUO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRTaWRlSWZQYW5uaW5nUGFzdEVuZE9mQ2FudmFzR3JvdXAoXG4gICAgY2FudmFzR3JvdXBSZWN0OiBSZWN0LFxuICAgIHZwQm91bmRzOiBSZWN0XG4gICk6IFNpZGUge1xuICAgIGlmICh0aGlzLmlzUGFubmluZ091dHNpZGVMZWZ0KGNhbnZhc0dyb3VwUmVjdCwgdnBCb3VuZHMpKSB7XG4gICAgICByZXR1cm4gU2lkZS5MRUZUO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc1Bhbm5pbmdPdXRzaWRlUmlnaHQoY2FudmFzR3JvdXBSZWN0LCB2cEJvdW5kcykpIHtcbiAgICAgIHJldHVybiBTaWRlLlJJR0hUO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBpc1Bhbm5pbmdPdXRzaWRlQ2FudmFzR3JvdXAoXG4gICAgY2FudmFzR3JvdXBSZWN0OiBSZWN0LFxuICAgIHZwQm91bmRzOiBSZWN0XG4gICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmlzUGFubmluZ091dHNpZGVMZWZ0KGNhbnZhc0dyb3VwUmVjdCwgdnBCb3VuZHMpIHx8XG4gICAgICB0aGlzLmlzUGFubmluZ091dHNpZGVSaWdodChjYW52YXNHcm91cFJlY3QsIHZwQm91bmRzKVxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgaXNQYW5uaW5nT3V0c2lkZUxlZnQoY2FudmFzR3JvdXBSZWN0OiBSZWN0LCB2cEJvdW5kczogUmVjdCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB2cEJvdW5kcy54IDwgY2FudmFzR3JvdXBSZWN0Lng7XG4gIH1cblxuICBzdGF0aWMgaXNQYW5uaW5nT3V0c2lkZVJpZ2h0KGNhbnZhc0dyb3VwUmVjdDogUmVjdCwgdnBCb3VuZHM6IFJlY3QpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgdnBCb3VuZHMueCArIHZwQm91bmRzLndpZHRoID4gY2FudmFzR3JvdXBSZWN0LnggKyBjYW52YXNHcm91cFJlY3Qud2lkdGhcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24gQ3VycmVudCBjb21wdXRlZCBkaXJlY3Rpb24sIGV4cHJlc3NlZCBhcyBhblxuICAgKiBhbmdsZSBjb3VudGVyY2xvY2t3aXNlIHJlbGF0aXZlIHRvIHRoZSBwb3NpdGl2ZSBYIGF4aXMgKC1waSB0byBwaSwgaW4gcmFkaWFucykuXG4gICAqIE9ubHkgdmFsaWQgaWYgc3BlZWQgPiAwLlxuICAgKi9cbiAgc3RhdGljIGlzRGlyZWN0aW9uSW5SaWdodFNlbWljaXJjbGUoZGlyZWN0aW9uOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZGlyZWN0aW9uID4gLU1hdGguUEkgLyAyICYmIGRpcmVjdGlvbiA8IE1hdGguUEkgLyAyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24gQHNlZSBpc0RpcmVjdGlvbkluUmlnaHRTZW1pY2lyY2xlXG4gICAqL1xuICBzdGF0aWMgaXNEaXJlY3Rpb25JbkxlZnRTZW1pY2lyY2xlKGRpcmVjdGlvbjogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmlzRGlyZWN0aW9uSW5SaWdodFNlbWljaXJjbGUoZGlyZWN0aW9uKSB8fCBkaXJlY3Rpb24gPT09IDA7IC8vIGZpeCBmb3Igc3BlZWQgPSAwXG4gIH1cbn1cbiJdfQ==