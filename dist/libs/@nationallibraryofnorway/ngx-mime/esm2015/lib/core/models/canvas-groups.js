export class CanvasGroups {
    constructor() {
        this.canvasGroupRects = [];
        this.canvasRects = [];
        this.canvasesPerCanvasGroup = [];
    }
    add(rect) {
        this.canvasGroupRects.push(rect);
    }
    addRange(rects) {
        this.canvasGroupRects = rects;
    }
    get(index) {
        return Object.assign({}, this.canvasGroupRects[index]);
    }
    findClosestIndex(point) {
        let i = 0;
        let lastDelta;
        if (point === null) {
            return -1;
        }
        this.canvasGroupRects.some(function (rect, index) {
            const delta = Math.abs(point.x - rect.centerX);
            if (delta >= lastDelta) {
                return true;
            }
            i = index;
            lastDelta = delta;
        });
        return i;
    }
    getMaxHeight() {
        return Math.max.apply(Math, this.canvasGroupRects.map(function (rect) {
            return rect.height;
        }));
    }
    getMaxWidth() {
        return Math.max.apply(Math, this.canvasGroupRects.map(function (rect) {
            return rect.width;
        }));
    }
    length() {
        return this.canvasGroupRects.length;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLWdyb3Vwcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuYXRpb25hbGxpYnJhcnlvZm5vcndheS9uZ3gtbWltZS8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL21vZGVscy9jYW52YXMtZ3JvdXBzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sT0FBTyxZQUFZO0lBQXpCO1FBQ0UscUJBQWdCLEdBQVcsRUFBRSxDQUFDO1FBQzlCLGdCQUFXLEdBQVcsRUFBRSxDQUFDO1FBQ3pCLDJCQUFzQixHQUFlLEVBQUUsQ0FBQztJQXFEMUMsQ0FBQztJQW5EUSxHQUFHLENBQUMsSUFBVTtRQUNuQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTSxRQUFRLENBQUMsS0FBYTtRQUMzQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxHQUFHLENBQUMsS0FBYTtRQUN0Qix5QkFBWSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUc7SUFDN0MsQ0FBQztJQUVNLGdCQUFnQixDQUFDLEtBQVk7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsSUFBSSxTQUFjLENBQUM7UUFFbkIsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDWDtRQUNELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBUyxJQUFVLEVBQUUsS0FBYTtZQUMzRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQy9DLElBQUksS0FBSyxJQUFJLFNBQVMsRUFBRTtnQkFDdEIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELENBQUMsR0FBRyxLQUFLLENBQUM7WUFDVixTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRU0sWUFBWTtRQUNqQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUNuQixJQUFJLEVBQ0osSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxVQUFTLElBQUk7WUFDckMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRU0sV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUNuQixJQUFJLEVBQ0osSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxVQUFTLElBQUk7WUFDckMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRU0sTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztJQUN0QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vcG9pbnQnO1xuaW1wb3J0IHsgUmVjdCB9IGZyb20gJy4vcmVjdCc7XG5cbmV4cG9ydCBjbGFzcyBDYW52YXNHcm91cHMge1xuICBjYW52YXNHcm91cFJlY3RzOiBSZWN0W10gPSBbXTtcbiAgY2FudmFzUmVjdHM6IFJlY3RbXSA9IFtdO1xuICBjYW52YXNlc1BlckNhbnZhc0dyb3VwOiBudW1iZXJbXVtdID0gW107XG5cbiAgcHVibGljIGFkZChyZWN0OiBSZWN0KTogdm9pZCB7XG4gICAgdGhpcy5jYW52YXNHcm91cFJlY3RzLnB1c2gocmVjdCk7XG4gIH1cblxuICBwdWJsaWMgYWRkUmFuZ2UocmVjdHM6IFJlY3RbXSk6IHZvaWQge1xuICAgIHRoaXMuY2FudmFzR3JvdXBSZWN0cyA9IHJlY3RzO1xuICB9XG5cbiAgcHVibGljIGdldChpbmRleDogbnVtYmVyKTogUmVjdCB7XG4gICAgcmV0dXJuIHsgLi4udGhpcy5jYW52YXNHcm91cFJlY3RzW2luZGV4XSB9O1xuICB9XG5cbiAgcHVibGljIGZpbmRDbG9zZXN0SW5kZXgocG9pbnQ6IFBvaW50KTogbnVtYmVyIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxhc3REZWx0YTogYW55O1xuXG4gICAgaWYgKHBvaW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIHRoaXMuY2FudmFzR3JvdXBSZWN0cy5zb21lKGZ1bmN0aW9uKHJlY3Q6IFJlY3QsIGluZGV4OiBudW1iZXIpIHtcbiAgICAgIGNvbnN0IGRlbHRhID0gTWF0aC5hYnMocG9pbnQueCAtIHJlY3QuY2VudGVyWCk7XG4gICAgICBpZiAoZGVsdGEgPj0gbGFzdERlbHRhKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaSA9IGluZGV4O1xuICAgICAgbGFzdERlbHRhID0gZGVsdGE7XG4gICAgfSk7XG4gICAgcmV0dXJuIGk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TWF4SGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KFxuICAgICAgTWF0aCxcbiAgICAgIHRoaXMuY2FudmFzR3JvdXBSZWN0cy5tYXAoZnVuY3Rpb24ocmVjdCkge1xuICAgICAgICByZXR1cm4gcmVjdC5oZWlnaHQ7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TWF4V2lkdGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkoXG4gICAgICBNYXRoLFxuICAgICAgdGhpcy5jYW52YXNHcm91cFJlY3RzLm1hcChmdW5jdGlvbihyZWN0KSB7XG4gICAgICAgIHJldHVybiByZWN0LndpZHRoO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGxlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNhbnZhc0dyb3VwUmVjdHMubGVuZ3RoO1xuICB9XG59XG4iXX0=