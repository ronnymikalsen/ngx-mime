import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { MimeViewerConfig } from '../mime-viewer-config';
import { ModeChanges } from '../models/modeChanges';
import { ViewerMode } from '../models/viewer-mode';
export class ModeService {
    constructor() {
        this.modeChanges = new ModeChanges();
        const mimeConfig = new MimeViewerConfig();
        this.toggleModeSubject = new BehaviorSubject(new ModeChanges());
        this._initialMode = mimeConfig.initViewerMode;
        this._mode = this._initialMode;
    }
    get onChange() {
        return this.toggleModeSubject.asObservable().pipe(distinctUntilChanged());
    }
    set mode(mode) {
        this._mode = mode;
        this.change();
    }
    get mode() {
        return this._mode;
    }
    set initialMode(mode) {
        this._initialMode = mode;
        this.mode = mode;
    }
    get initialMode() {
        return this._initialMode;
    }
    toggleMode() {
        if (this.mode === ViewerMode.DASHBOARD) {
            this.mode = ViewerMode.PAGE;
        }
        else if (this.mode === ViewerMode.PAGE ||
            this.mode === ViewerMode.PAGE_ZOOMED) {
            this.mode = ViewerMode.DASHBOARD;
        }
    }
    isPageZoomed() {
        return this.mode === ViewerMode.PAGE_ZOOMED;
    }
    change() {
        this.modeChanges.previousValue = this.modeChanges.currentValue;
        this.modeChanges.currentValue = this._mode;
        this.toggleModeSubject.next(Object.assign({}, this.modeChanges));
    }
}
ModeService.decorators = [
    { type: Injectable }
];
ModeService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3gtbWltZS9zcmMvbGliL2NvcmUvbW9kZS1zZXJ2aWNlL21vZGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDekQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUduRCxNQUFNLE9BQU8sV0FBVztJQU10QjtRQUZRLGdCQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUd0QyxNQUFNLFVBQVUsR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksZUFBZSxDQUFDLElBQUksV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxjQUFjLENBQUM7UUFDOUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCxJQUFJLElBQUksQ0FBQyxJQUFnQjtRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBSSxXQUFXLENBQUMsSUFBZ0I7UUFDOUIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsU0FBUyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztTQUM3QjthQUFNLElBQ0wsSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsSUFBSTtZQUM3QixJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxXQUFXLEVBQ3BDO1lBQ0EsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxJQUFJLEtBQU0sVUFBVSxDQUFDLFdBQVcsQ0FBQTtJQUM5QyxDQUFDO0lBRU8sTUFBTTtRQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDO1FBQy9ELElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDM0MsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksbUJBQ3RCLElBQUksQ0FBQyxXQUFXLEVBQ25CLENBQUM7SUFDTCxDQUFDOzs7WUF6REYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBNaW1lVmlld2VyQ29uZmlnIH0gZnJvbSAnLi4vbWltZS12aWV3ZXItY29uZmlnJztcbmltcG9ydCB7IE1vZGVDaGFuZ2VzIH0gZnJvbSAnLi4vbW9kZWxzL21vZGVDaGFuZ2VzJztcbmltcG9ydCB7IFZpZXdlck1vZGUgfSBmcm9tICcuLi9tb2RlbHMvdmlld2VyLW1vZGUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTW9kZVNlcnZpY2Uge1xuICBwcml2YXRlIF9pbml0aWFsTW9kZTogVmlld2VyTW9kZTtcbiAgcHJpdmF0ZSBfbW9kZTogVmlld2VyTW9kZTtcbiAgcHJpdmF0ZSB0b2dnbGVNb2RlU3ViamVjdDogQmVoYXZpb3JTdWJqZWN0PE1vZGVDaGFuZ2VzPjtcbiAgcHJpdmF0ZSBtb2RlQ2hhbmdlcyA9IG5ldyBNb2RlQ2hhbmdlcygpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IG1pbWVDb25maWcgPSBuZXcgTWltZVZpZXdlckNvbmZpZygpO1xuICAgIHRoaXMudG9nZ2xlTW9kZVN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG5ldyBNb2RlQ2hhbmdlcygpKTtcbiAgICB0aGlzLl9pbml0aWFsTW9kZSA9IG1pbWVDb25maWcuaW5pdFZpZXdlck1vZGU7XG4gICAgdGhpcy5fbW9kZSA9IHRoaXMuX2luaXRpYWxNb2RlO1xuICB9XG5cbiAgZ2V0IG9uQ2hhbmdlKCk6IE9ic2VydmFibGU8TW9kZUNoYW5nZXM+IHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVNb2RlU3ViamVjdC5hc09ic2VydmFibGUoKS5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuICB9XG5cbiAgc2V0IG1vZGUobW9kZTogVmlld2VyTW9kZSkge1xuICAgIHRoaXMuX21vZGUgPSBtb2RlO1xuICAgIHRoaXMuY2hhbmdlKCk7XG4gIH1cblxuICBnZXQgbW9kZSgpOiBWaWV3ZXJNb2RlIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZTtcbiAgfVxuXG4gIHNldCBpbml0aWFsTW9kZShtb2RlOiBWaWV3ZXJNb2RlKSB7XG4gICAgdGhpcy5faW5pdGlhbE1vZGUgPSBtb2RlO1xuICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gIH1cblxuICBnZXQgaW5pdGlhbE1vZGUoKTogVmlld2VyTW9kZSB7XG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYWxNb2RlO1xuICB9XG5cbiAgdG9nZ2xlTW9kZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tb2RlID09PSBWaWV3ZXJNb2RlLkRBU0hCT0FSRCkge1xuICAgICAgdGhpcy5tb2RlID0gVmlld2VyTW9kZS5QQUdFO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0aGlzLm1vZGUgPT09IFZpZXdlck1vZGUuUEFHRSB8fFxuICAgICAgdGhpcy5tb2RlID09PSBWaWV3ZXJNb2RlLlBBR0VfWk9PTUVEXG4gICAgKSB7XG4gICAgICB0aGlzLm1vZGUgPSBWaWV3ZXJNb2RlLkRBU0hCT0FSRDtcbiAgICB9XG4gIH1cblxuICBpc1BhZ2Vab29tZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubW9kZSAgPT09IFZpZXdlck1vZGUuUEFHRV9aT09NRURcbiAgfVxuXG4gIHByaXZhdGUgY2hhbmdlKCkge1xuICAgIHRoaXMubW9kZUNoYW5nZXMucHJldmlvdXNWYWx1ZSA9IHRoaXMubW9kZUNoYW5nZXMuY3VycmVudFZhbHVlO1xuICAgIHRoaXMubW9kZUNoYW5nZXMuY3VycmVudFZhbHVlID0gdGhpcy5fbW9kZTtcbiAgICB0aGlzLnRvZ2dsZU1vZGVTdWJqZWN0Lm5leHQoe1xuICAgICAgLi4udGhpcy5tb2RlQ2hhbmdlcyxcbiAgICB9KTtcbiAgfVxufVxuIl19